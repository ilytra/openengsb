<?xml version="1.0" encoding="UTF-8"?>
<!--

    Copyright 2010 OpenEngSB Division, Vienna University of Technology

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

-->

<chapter xml:id="developer.wrapped" version="5.0" xmlns="http://docbook.org/ns/docbook"
  xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://docbook.org/ns/docbook http://www.docbook.org/xml/5.0/xsd/docbook.xsd
  http://www.w3.org/1999/xlink http://www.docbook.org/xml/5.0/xsd/xlink.xsd
  http://www.w3.org/2001/XMLSchema-instance http://www.w3.org/2001/XMLSchema-instance.xsd">

  <title>Prepare und usue Non-OSGi Artifacts</title>

  <section xml:id="developer.wrapped.use">
    <title>Use Wrapped Jars</title>
    <para> Basically, wrapped JARs do not differ in any way from basic Maven artifacts, besides that they are deployable
      in OSGi environments. If it is required to use these artifacts in OpenEngSB nothing specific has to be done. All
      artifacts in the wrapped directory are deployed in a Maven repository which is added to the root POM. Therefore
      these artifacts can be used directly. In any case you like to build these artifacts on your own point your console
      to the wrapped directory and execute <code>mvn clean install</code>. This will install the artifacts in the local
      Maven repository and make them available for the application. </para>
  </section>

  <section xml:id="developer.wrapped.base">
    <title>Create Wrapped Artifacts</title>
    <para>This chapter is a step by step guide on how to create a wrapped JAR.</para>
    <orderedlist>
      <listitem>
        <para>In case that no already wrapped library is available in the public repositories a package has to be
          created. While there are packages available to generate the project they are not required. Most of the work is
          already abstracted into the root-pom of the wrapped directory. Therefore the project should be crated
          manually. First of all create a folder with the name of the project you like to wrap. Typically the groupId of
          the bundle to wrap is sufficient. For example, for a project wrapping all wicket bundles the folder
          org.apache.wicket is created.</para>
      </listitem>
      <listitem>
        <para>As a next step add the newly created folder as a module to the wrapped/pom.xml file in the module section.
          For the formerly created wicket project org.apache.wicket should be added to the module section.</para>
      </listitem>
      <listitem>
        <para>Now create an pom.xml file and a osgi.bnd file in the newly created project folder.</para>
      </listitem>
      <listitem>
        <para>The pom.xml contains the basic project information. As parent for the project the wrapped/pom.xml should
          be used. Basically for every wrapped jar the project has the following structure: <programlisting language="xml"><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<!--
OPENENGSB LICENSE
-->
<project>

  <parent>
    <groupId>org.openengsb.wrapped</groupId>
    <artifactId>openengsb-wrapped</artifactId>
    <version>1</version>
  </parent>

  <properties>
    <bundle.symbolicName>wrapped_jar_group_id</bundle.symbolicName>
    <wrapped.groupId>wrapped_jar_group_id</wrapped.groupId>
    <wrapped.artifactId>wrapped_jar_artifact_id</wrapped.artifactId>
    <wrapped.version>wrapped_jar_version</wrapped.version>
    <bundle.namespace>${wrapped.groupId}</bundle.namespace>
  </properties>

  <modelVersion>4.0.0</modelVersion>
  <groupId>${wrapped.groupId}</groupId>
  <artifactId>${parent.groupId}.${wrapped.groupId}</artifactId>
  <version>${wrapped.version}</version>

  <name>${bundle.symbolicName}</name>

  <packaging>bundle</packaging>

  <dependencies>
    <all_jars_which_should_be_embedded />
  </dependencies>

</project>]]></programlisting></para>
      </listitem>
      <listitem><para>The osgi.bnd file contains the OSGi specific statements for the maven-bundle-plugin. While the
          default export and import is already handled in the root pom only project specific settings have to be
          configured here. For example always all packages witin inthe bundle-namespace are exported. This is for most
          scenarios sufficient. In addition all dependencies foudn are automatically imported as required. This is
          mostly not what is wanted. Instead the parts of the library which have to be importated should be defined
          separated. The following listing should give an short example how such a osgi.bnl file can look like. For a
          full list of possible commands see the <link
            xlink:href="http://felix.apache.org/site/apache-felix-maven-bundle-plugin-bnd.html">maven-bundle-plugin
            documentation</link>.
          <programlisting language="xml">#
# OPENENGSB LICENSE
#
Embed-Dependency: *;scope=compile|runtime;type=!pom;inline=true

Import-Package: sun.misc;resolution:=optional,\
javax.servlet;version="[2.5.0, 3.0.0)",\
*;resolution:=optional</programlisting></para>
      </listitem>
    </orderedlist>
  </section>

  <section xml:id="developer.wrapped.workflow">
    <title>Workflow</title>
    <para>The regular OpenEngSB typically does not have to modify anything within this directory. In addition all
      artifacts in this part are independent of the typical OpenEngSB build and deploy life-cycle. The versions within
      these artifacts change completely independent of the OpenEngSB. Therefore this directory and its subprojects are
      not entered within the module section of the root pom! Instead, if it is really required to build them (e.g. if a
      new artifact is added) the maven commands have to be executed directly in the wrapped sub-directory.</para>
    <para>If a developer adds a new library in this folder it is NOT directly available to all other developers. For
      testing it is possible that the other developers build the wrapped directory independently. Nevertheless, the
      proposed solution is to inform a project admin about the new library in you branch. The admin can simply deploy
      (using <literal>maven clean install deploy</literal>) your artifacts to the maven repositories. Afterwards the
      wrapped artifacts are downloaded for all other developers during the build process.</para>
  </section>

</chapter>
