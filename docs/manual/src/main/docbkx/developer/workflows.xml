<?xml version="1.0" encoding="UTF-8"?>
<!--

    Copyright 2010 OpenEngSB Division, Vienna University of Technology

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

-->

<chapter version="5.0"
         xsi:schemaLocation="http://docbook.org/ns/docbook http://www.docbook.org/xml/5.0/xsd/docbook.xsd   http://www.w3.org/1999/xlink http://www.docbook.org/xml/5.0/xsd/xlink.xsd   http://www.w3.org/2001/XMLSchema-instance http://www.w3.org/2001/XMLSchema-instance.xsd"
         xml:id="developer.workflows" xmlns="http://docbook.org/ns/docbook"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:ns="http://docbook.org/ns/docbook">
  <title>Workflows</title>

  <para>The OpenEngSB supports the modeling of workflows. This could be done
  by two different approaches. First of all a rule-based event approach, by
  defining actions based on events (and their content) whiche where thrown in
  or to the bus. Events are practical for "short-time handling" since they are
  also easy to replace and extend. For long running business processes the
  secondary workflow method could be used which is <link
  linkend="workflows.processes">based on processes described in
  Drools-Flow</link>.</para>

  <para>The workflow service takes "events" as input and handles them using a
  rulebased system (JBoss Drools). It provides methods to manage the
  rules.</para>

  <para>The workflow component consists of two main parts: The RuleManager and
  the WorkflowService. </para>
  <subsection>
    <title>Workflow service</title>

    <para>The WorkflowService is responsible for processing Events, and
    makes sure the rulebase is connected to the environment (domains and
    connectors). When an event is fired, the workflow-service spawns a new
    Session of the rulebase. The session gets populated with references to
    domain-services and other helper-objects in form of global variables. A
    drools-session is running an a sandbox. This means that the supplied
    globals are the only way of triggering actions outside the rule-session.
    </para>
  </subsection>
  <subsection>
    <title>Rulemanager</title>

    <para>The RuleManager provides methods for modifying the rulebase. As
    opposed to plain drl-files, the rulemanager organized the elements of
    the rulebase in its own manner. Rules, Functions and flows are saved
    separately. All elements share a common collection of import- and
    global-declarations. These parts are sticked together by the
    rulemanager, to a consistent rulebase. So when adding a new rule or
    function to the rulebase, make sure that all imports are present before.
    Otherwise the adding of the elements will fail. </para>
  </subsection>

  <section xml:id="workflows.processes">
    <title>Processes</title>

    <para>TBW - explain Drools-Flow processes.</para>
  </section>
</chapter>
