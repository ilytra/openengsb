<?xml version="1.0" encoding="UTF-8"?>
<!--

    Copyright 2010 OpenEngSB Division, Vienna University of Technology

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

-->

<chapter xml:id="developer.quickstart" version="5.0" xmlns="http://docbook.org/ns/docbook"
  xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://docbook.org/ns/docbook http://www.docbook.org/xml/5.0/xsd/docbook.xsd
  http://www.w3.org/1999/xlink http://www.docbook.org/xml/5.0/xsd/xlink.xsd
  http://www.w3.org/2001/XMLSchema-instance http://www.w3.org/2001/XMLSchema-instance.xsd">

  <title>Getting Started as a Developer</title>
  <para>This chapter describes the basic steps to get started as a developer for the OpenEngSB project.</para>

  <section xml:id="developer.quickstart.infrastructure">
    <title>Getting comfortable with the infrastructure</title>
    <para>As any open source project the OpenEngSB development depends on a wide range of different infrastructural and 
      communication methods to get things done. The following sub-chapters describe the different tools, their
      location and usage in the OpenEngSB development process.</para>

    <section xml:id="developer.quickstart.infrastructure.mail">
      <title>Mailing Lists</title>
      <para>The most important communication medium for the OpenEngSB development team is email. Mostly all of
        the vital design, architectural and infrastructural decisions are discussed on the OpenEngSB developer
        list. Therefore, the first step to get involved into the development of the OpenEngSB is to register to the 
        <ulink url="http://groups.google.com/group/openengsb-dev">Google Groups OpenEngSB Developer Mailing List
        </ulink> and say hello world.</para>
      <para>While notifications from the Hudson Build Server, about code commits and Jira issues are vital for the
        OpenEngSB core developer, they may not be as interesting for you. If you get annoyed by the automatically 
        generated notification mails ignore all mails from openengsb@gmail.com and noreply@github.com to 
        openengsb-dev@googlegroups.com. Please remember it is important to configure both, <literal>to</literal> and 
        <literal>from</literal> in your filter. Both addresses will also send notifications directly to you which are 
        important and should not be ignored!</para>
    </section>

    <section xml:id="developer.quickstart.infrastructure.jira">
      <title>Jira Issue Tracker</title>
      <para>All issues are stored within a Jira instance reachable at <ulink 
      url="http://issues.openengsb.org/jira/browse/OPENENGSB">issues.openengsb.org</ulink>. Please use the issue tracker
      to keep track of all bugs, ideas and new features you're currently working or of which you think they might be
      interesting.</para>
    </section>

    <section xml:id="developer.quickstart.infrastructure.github">
      <title>Code Repository</title>
      <para>As for any open source project the source code is public available. We've chosen <ulink url="http://github.com">
        Github</ulink> for this task. The project is available at <ulink url="http://github.com/openengsb/openengsb">
        github.com/openengsb/openengsb</ulink>.</para>
      <para>As explained later within this document Github is not only used to store our code, but also for collaboration,
        code review and patch-tracking.</para>
    </section>

    <section xml:id="developer.quickstart.infrastructure.maven">
      <title>Maven Repository</title>
      <para>For the moment the OpenEngSB artifacts are not stored at maven.central, but in an own Nexus maven repository
        available at <ulink url="http://maven.openengsb.org/nexus">maven.openengsb.org</ulink>. If any additional
        artifacts are required currently not at any maven repository we can host them on the server. Please simply write
        to the mailing list which artifact is required and provide the artifact and the pom GAF parameters.</para>
    </section>

    <section xml:id="developer.quickstart.infrastructure.hudson">
      <title>Build Server</title>
      <para>All branches in the OpenEngSB repository are watched and built by a Hudson build server instance available at
        <ulink url="http://build.openengsb.org/hudson/">build.openengsb.org</ulink>. Notifications about failures are 
        directly send to the OpenEngSB developer list.</para>
    </section>

  </section>
  
  <section xml:id="developer.quickstart.pre">
    <title>Prerequisites</title>
    <para>First of all the latest JDK has to be installed on the system and the <envar>JAVA_HOME</envar> variable has to be
      set accordingly. All further steps are described in the subsections of this chapter.</para>

    <section xml:id="developer.quickstart.pre.git">
      <title>Installing Git</title>
      <para> It is assumed that Git is installed. For Linux your distribution provides already a 
        package for git. Please use the package manager of your distribution (apt, yum, pacman, ...) to install it. For MAC
        binaries are available at <ulink url="git-scm.com">git-scm.com</ulink>. For MS users <ulink url="www.cygwin.com">cygwin
        </ulink> or <ulink url="code.google.com/p/msysgit">msysgit</ulink>. After installing, set at least the following 
        variables:</para>
      <literallayout>
        <command>git config</command> <option>--global</option> user.name "<replaceable>Firstname Lastname</replaceable>"
        <command>git config</command> <option>--global</option> user.email <replaceable>user@example.com</replaceable>
        <command>git config</command> <option>--global</option> core.autcrlf input
      </literallayout>
    </section>

    <section xml:id="developer.quickstart.pre.maven">
      <title>Installing Maven</title>
      <para> Finally download Apache Maven and unpack it. Add the path of the maven binary to your <envar>PATH</envar> variable.
        Furthermore you should set the <envar>MAVEN_OPTS</envar> environment variable to allow Maven to use more RAM. If
        you don't you'll get Out Of Memory errors.
        <literallayout>
          <command>export</command> <envar>PATH</envar>=$<envar>PATH</envar>:<replaceable>/path/to/maven</replaceable>/bin
          <command>export</command> <envar>MAVEN_OPTS</envar>='-Xmx1024M -XX:MaxPermSize=512m'
        </literallayout>
        Add these commands to <filename>~/.bashrc</filename> to make the settings permanent.</para>
    </section>

  </section>

  <section xml:id="developer.quickstart.essential">
    <title>Starting OpenEngSB</title>
    <para>The next step is to get the OpenEngSB source by checking out the current master using git:</para>
    <literallayout>
      <command>git clone</command> git://github.com/openengsb/openengsb.git
    </literallayout>
    <para>Now start the OpenEngSB by executing</para>
    <literallayout>
      <command>mvn clean install pax:provision</command>
    </literallayout>
    <para>This command builds, tests and runs the OpenEngSB right from your command-line. Executing the following command
      will shutdown it again:</para>
    <literallayout>
      <command>shutdown</command>
    </literallayout>
  </section>

  <section xml:id="developer.quickstart.eclipse">
    <title>Using Eclipse</title>
    <para> Eclipse had been chosen by the OpenEngSB team as the main development environment. After checkout the code
      the following command creates the required Eclipse project files:</para>
    <literallayout>
      <command>mvn</command> install
      <command>mvn</command> eclipse:eclipse
    </literallayout>
    <para>Start Eclipse and select any workspace. The folder  <filename>eclipse-workspace</filename> is ignored in the 
      OpenEngSB project structure for this purpose. But you can choose any other directory if you prefer. At the preference
      page go to <guimenu>Java/Build Path/Classpath Variables</guimenu> and create a new <guilabel>M2_REPO</guilabel> pointing
      to <filename>~/.m2/repository</filename>. Now use <guimenu>File</guimenu>, <guimenu>Import...</guimenu>, 
      <guilabel>Existing Projects into Workspace</guilabel>. As the root directory select the root of the OpenEngSB source. 
      Eclipse will list several projects and for now it's best to import them all by clicking <guibutton>Finish</guibutton>.</para>
    <para>At <filename>openengsb/etc/eclipse/</filename> eclipse configuration files for formatting and Checkstyle can be found.
      These files should be used.</para>
  </section>

  <section xml:id="developer.quickstart.noneclipse">
    <title>Using Other IDEs than Eclipse</title>
    <para>Basically, the OpenEngSB is developed in plain Java, which means any other IDE than Eclipse can be used too. While
      there are tools for most IDEs to use Checkstyle, but non of it supports the formatting file of the OpenEngSB. Please use
      Checkstyle, which automatically validates the eclipse formatting rules too.</para>    
  </section>

  <section xml:id="git">
    <title>Git Documentation</title>
    <section>
      <title>Usage</title>
      <para> First of all this chapter explains only the <emphasis>very</emphasis> basics of Git and only that parts
        directly relevant for the development of the OpenEngSB project, but not the entire idea and possibilities of
        Git. <emphasis>Please</emphasis> read some tutorials first to get how to work with Git and see this chapter more
        as an summary! You may also take a look at the <link xlink:href="http://git-scm.com/documentation/">Git Documentation
          Page</link> and the <link xlink:href="http://progit.org/book/">Pro Git Book</link>. </para>
    </section>
    <section>
      <title>Github</title>
      <para>OpenEngSB is developed at <link xlink:href="http://github.com/">github.com</link>. Please create an account there
        and explore its features. Specify your real name in the admin tab and add a picture. This makes it easier to
        associate your commits to you.</para>
    </section>
    <section>
      <title>Starting up and configure</title>
      <para> Before starting to work with Git some settings should be applied to Git. Therefore simply execute the
        following commands.
        <literallayout><command>git config</command> <option>--global</option> user.name "<replaceable>Firstname Lastname</replaceable>"
<command>git config</command> <option>--global</option> user.email <replaceable>user@example.com</replaceable>
<command>git config</command> <option>--global</option> color.ui "auto"
<command>git config</command> <option>--global</option> pack.threads "0"
<command>git config</command> <option>--global</option> diff.renamelimit "0"
<command>git config</command> <option>--global</option> core.autocrlf "input"</literallayout>
        Additionally execute the special settings for github as could be found on github in the "Account Settings" tab
        is a point "Global git config information". Please use the two git commands described there
        <literallayout><command>git config</command> <option>--global</option> github.user <replaceable>username</replaceable>
<command>git config</command> <option>--global</option> github.token <replaceable>token</replaceable></literallayout>
        If you don't already have an SSH key you can create one by executing <command>ssh-keygen</command> Simply answer
        all questions from the application with "enter" without enter any values. Afterwards the content of the
          <filename>id_rsa.pub</filename> file from your <filename>~/.ssh/</filename> directory should be submitted to
        github (<guilabel>Account Settings</guilabel>/<guilabel>SSH public keys</guilabel>). </para>
    </section>

    <section>
      <title>Contributor Workflow</title>
      <para>Contributor are all developer who like to contribute to the OpenEngSB project, but not have commit rights
        to openengsb/openengsb.</para>
      <para>Please start by choose or create a new issue. Now create a new fork of the OpenEngSB at Github (if you've not
        done already so). Clone you're fork, but also add the original openengsb repository as remote repository. Please
        create a new branch named OPENENGSB-ISSUE_NUMBER_YOURE_WORKING_ON. Optionally append /DESCRIPTION. This is the
        OpenEngSB schema for naming branches and we'll really appreciate if you work according to it. In addition create
        the branch based on the origin/master oder origin/integration and not the branches of your fork. In this case
        you don't have to bother with updates of these branches in the OpenEngSB.</para>
      <para>Now hack, commit and push as you like. If you think you're finished execute the 
        <filename>etc/scripts/pre-push.sh</filename> script validating your code, tests, licenses and so on. If 
        everything works without errors create a Github pull request on Github, between the master or integration
        branch (depending on where you've created your branch on) and your branch. In addition it will help if you
        add the link to the pull request to the issue you're working on. A commiter will tend as fast as possible to
        your request and give feedback or directly merge your commit into the integration/master branch.</para>
    </section>
    <section>
      <title>Commiter Workflow</title>
      <para> The only difference between a commiter and a contributor is that he has to watch and merge branches of
        contributors. If a commiter is happy with the work of a contributor. Comments and other discussions should be
        done on the mailing list and/or via the Github review system and pull requests.</para>
      <para>In addition commiters typically do not create forks but rather create their branches directly  in
        the OpenEngSB repository. This is done because the repository is covered by the OpenEngSB build server and
        in addition keeps everything closer together.</para>
    </section>
    <section>
      <title>Additional Rules</title>
      <para>
        <orderedlist>
          <listitem><para>(Contributor/Committer) All development is done in forks (also of the core developers) One
            exception to this rule exists: Small fixes and maintenance work which is NOT related to a new feature and
            does not exceed 2 commits should be cherry-picked into the master directly.</para></listitem>

          <listitem><para>Contributor/Committer) Rebase is <emphasis>not</emphasis> dead (although we use merges).
              <emphasis>Never ever</emphasis> commit local merges. You still should develop in local dev branches and
            rebasing them with the upstream branches. Only if nobody else has access to your fork you can be sure that
            nobody changed it!</para></listitem>

          <listitem><para>(Committer) If merging branches from forked repositories ALWAYS use the <option>--no-ff</option>
            option for merges; this will always create a merge node (even if a fast-forward merge is possible). This is
            required to create a clear and consistent history!</para></listitem>

          <listitem><para>Avoid backward merges from the master and keep feature branches small! This does not mean that
            backward merges from master are forbidden. But they should not be done too often, since they create a
            history not easy to read. Please use the method described on this page (with <option>--no-ff</option>
            <option>--no-commit</option>) to reduce the number of merge nodes.</para></listitem>

          <listitem><para>Use <emphasis>meaningful</emphasis> feature branch names. Using the merge history in the master you
            can easily follow the development of features. But this requires (maybe long) good names! In addition, always
            start with OPENENGSB-NUMBER of the issue you're working on. Try to always do work based on issues. If no issue
            covers what you're doing create one.</para></listitem>

        </orderedlist>
      </para>
    </section>
  </section>

</chapter>

